/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *           Copyright (C) 2003 by the OpenSG Forum                          *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

OSG_BEGIN_NAMESPACE

template <class ValueT, Int32 iNamespace, class AllocT> inline
FieldDescriptionBase *MField<ValueT, 
                             iNamespace, 
                             AllocT    >::createFieldDescription(
    const Char8           *szFieldname,
          UInt32           uiFieldFlags,
          FieldEditMethod  fEditMethod,
          FieldGetMethod   fGetMethod)
{
    if(szFieldname == NULL)
    {
        FWARNING(("createFieldDescription no fieldname given"));

        return NULL;
    }

    if(uiFieldFlags == FieldDescFactoryBase::AutoFlags)
    {
        uiFieldFlags = MFDefaultFlags;
    }

    FieldDescriptionBase *returnValue = new typename Self::Description(
        _fieldType, 
        szFieldname,
        "",
        0,
        0,
        false,
        uiFieldFlags,
        fEditMethod,
        fGetMethod);

    return returnValue;
}

template <class ValueT, Int32 iNamespace, class AllocT> inline
FieldDescriptionBase *MField<ValueT, 
                             iNamespace,
                             AllocT    >::createIdxFieldDescription(
    const Char8                *szFieldname,
          UInt32                uiFieldFlags,
          FieldIndexEditMethod  fEditMethod,
          FieldIndexGetMethod   fGetMethod)
{
    if(szFieldname == NULL)
    {
        FWARNING(("createFieldDescriptionIdx no fieldname given"));

        return NULL;
    }

    if(uiFieldFlags == FieldDescFactoryBase::AutoFlags)
    {
        uiFieldFlags = MFDefaultFlags;
    }

    FieldDescriptionBase *returnValue = new typename Self::Description(
        _fieldType, 
        szFieldname,
        "",
        0,
        0,
        false,
        uiFieldFlags,
        fEditMethod,
        fGetMethod);

    return returnValue;
}

#if defined(OSG_STATIC_MEMEBER_NEEDS_COPY_ASIGN_INIT)

template <class ValueT, Int32 iNamespace, class AllocT>
FieldType MField<ValueT, iNamespace, AllocT>::_fieldType = FieldType(
     typename MFieldTraits::getMName (),
     typename MFieldTraits::getMPName(),
     typename MFieldTraits::getType  (),
     FieldType::MultiField,
     Self::Class,
    &Self::createFieldDescription,
    &Self::createIdxFieldDescription);

#else

template <class ValueT, Int32 iNamespace, class AllocT>
FieldType MField<ValueT, iNamespace, AllocT>::_fieldType(
     typename MFieldTraits::getMName (),
     typename MFieldTraits::getMPName(),
     typename MFieldTraits::getType  (),
     FieldType::MultiField,
     Self::Class,
    &Self::createFieldDescription,
    &Self::createIdxFieldDescription);

#endif

#if defined(OSG_TMPL_STATIC_MEMBER_NEEDS_HELPER_FCT)
template <class ValueT, Int32 iNamespace, class AllocT>
const FieldType &MField<ValueT, 
                        iNamespace, 
                        AllocT    >::fieldTypeExportHelper(void)
{
    return _fieldType;
}
#endif

OSG_END_NAMESPACE

